{
  "hash": "ab888af82466ff57474ece325c4b89e6",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n\n\n\n\n\n\n\n# Basic Plotting\n\nThis chapter will teach you how to visualise your data using `ggplot2`. R has several systems for making graphs, but `ggplot2` is the most elegant and versatile. The syntax behind `ggplot2` looks complicated at first, but once you understand it, it's incredibly powerful and can be used to visualise a wide range of data.\n\n## Structure\n\nThe main function in `ggplot2` is `ggplot()` which is used to initialise a plot. A plot in `ggplot2` is made up of multiple elements added to each other to create layers which each add something to the appearance of the chart. The basic template for a graph is as follows:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = <DATA>) +\n  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))\n```\n:::\n\n\n\n\n\n\n\n\nA geom function defines the way data and an aesthetic mapping is statistically transformed to create a plot. A plot can come in many forms, such as a bar graph, line and scatter graph, to name a few.\n\nA ggplot object must contain\n\n-   the data to be plotted as the first argument\n\n-   how that data should be mapped to the different aspects of the plot, defined using `aes()` (short for aesthetics).\n\n-   a geometric to draw the aesthetics with\n\n-   ggplot works with layers, each added with the `+` operator.\n\n-   Mappings are always added using the `aes()` command, which can be inside the `ggplot()` or `geom`.\n\nThis might look confusing initially, so let's show an example with one of the pre-loaded R datasets `mpg` by creating a scatter plot of displacement against `hwy`.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Data to be plotted\nggplot(data = mpg, aes(x = displ, y = hwy))+\n  #The geometric to draw the aesthetics with (in this case a point geom)\n     #The aesthetic mapping; the x axis to displacement and the y to hmwy\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-3-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nThis is the basic structure of any ggplot chart, but there are plenty of things you can do to change the appearance and function of your charts within ggplot.\n\n### Exercise\n\n`<div class=\"countdown\" id=\"timer_55bee8e0\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative; width: min-content;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n1.  Use the iris dataset (another built-in dataset in R) to create a simple scatter (geom_point) chart, plotting Sepal.Length as the x axis and Sepal.Width as the y\n\n<details>\n\n<summary style=\"font-size: 20px; font-weight: bold;\">\n\n3.1.1. Solution</strong>\n\n</summary>\n\n<br>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-4-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n</details>\n\n<br>\n\n## Types of Geom Functions\n\nYou aren't just limited to scatter plots; there are lots of geoms available in ggplot - the best resource for choosing an appropriate geom is the cheat sheet. This can be found at <https://github.com/rstudio/cheatsheets/blob/main/data-visualization-2.1.pdf>\n\nThe most commonly used geoms are:\n\n| Geom Function  | Description                    |\n|----------------|--------------------------------|\n| geom_bar       | Bar chart                      |\n| geom_point     | Scatter chart                  |\n| geom_line      | Line graph                     |\n| geom_histogram | Histogram                      |\n| geom_boxplot   | Box and whisker plot           |\n| geom_smooth    | Line of best fit style overlay |\n\nYou can also add multiple geoms to a single plot, for example you can add a smoothed line to the scatter plot you have already created using `geom_smooth`. You can either define the `aes` in each of the geom calls if they are different for each layer, or define them in the initial ggplot call if they are consistent across all layers.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Aes defined in ggplot calll\nggplot(data = mpg, aes(x = displ, y = hwy))+\n  geom_point() + #Add a + sign\n  geom_smooth()#Include a smoothed line\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-5-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n### Exercise\n\n`<div class=\"countdown\" id=\"timer_05988f5b\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative; width: min-content;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n1.  Use the geom_smooth aesthetic to add a smoothed line to your scatter plot.\n\n<details>\n\n<summary style=\"font-size: 20px; font-weight: bold;\">\n\n3.2.1. Solution</strong>\n\n</summary>\n\n<br>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-6-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n</details>\n\n<br>\n\n## Adding different aesthetics\n\nIt's normal that you will want to explore more than two variables within your datasets. You can do this by mapping those variables to different aspects of the chart in ggplot; things like colour, point shape, or line type.\n\nFor example, we could set the colour of the point to be determined by the vehicle class.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aesthetics\nggplot(data = mpg, aes(x = displ, y = hwy, colour = class))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-7-1.svg){width=576}\n:::\n:::\n\n\n\n\n\n\n\n\n------------------------------------------------------------------------\n\nggplot does some clever things when deciding what colours to use - for factorial variables it will assign each factor a unique colour (as in the above example), whilst for continuous variables it will assign a colour scale.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Here year is coloured as a continuous variable with a colour scale\nggplot(data = mpg, aes(x = displ, y = hwy, colour = year))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-8-1.svg){width=672}\n:::\n\n```{.r .cell-code}\n# Here by setting year to a factor it is coloured as a discrete variable with a unique colour for each\nggplot(data = mpg, aes(x = displ, y = hwy, colour = factor(year)))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-8-2.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nThere are a wide range of other aesthetics you can set to indicate different categories including:\n\n-   Point shape (shape)\n-   Line type (linetype)\n-   Size of points (size)\n-   Transparancy of points (alpha)\n\nApplying multiple aesthetics should be used with caution though; indicating more than one variable using aesthetics can quickly make a chart difficult to read!\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A chart wit multiple aesthetics applied.\nggplot(data = mpg, aes(x = displ, y = hwy, colour = class, size = cty))+\n  geom_point(shape = 5)\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-9-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nYou also don't *have* to map aesthetics onto variables; you can specify them manually if you don't want them to be related to a variable. To do this, you need to specify the colour, shape, linetype, etc **outside** of the aesthetic call. For example, you can define the colour of the points:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Aesthetics related to variables are mapped inside the aes call\nggplot(data = mpg, aes(x = displ, y = hwy))+\n  #Aesthetics that are manually set are mapped outside the aes call\n  geom_point(colour = \"orange\")\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-10-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n### Exercise\n\n`<div class=\"countdown\" id=\"timer_30b9a744\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative; width: min-content;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n1.  Map the colour aesthetic of your chart to correspond to the Species in the iris dataset.\n2.  Manually map the shape of the geom_point to be type 3\n\n<details>\n\n<summary style=\"font-size: 20px; font-weight: bold;\">\n\n3.3.1. Solution</strong>\n\n</summary>\n\n<br>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point(shape = 3) \n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-11-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n</details>\n\n<br>\n\n## Adding Layers\n\nThis produces the basics of any ggplot2 chart, however it doesn't always make the most attractive chart. To improve the appearance of the chart, the ggplot2 package has a wide range of functions which can be added to your basic chart to change everything from the legend, titles, or scales shown in the chart.\n\n## Scales\n\nChanging the x and y axes can be done using the *scale_x\\_* and *scale_y\\_* group of functions. There is a different type of these functions for each different type of scale and axis, and you need to take care you use the right one in each case!\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##For a continuous Y axis\nggplot(data, aes(x = x_axis, y = y_axis))+\n  scale_y_continuous()\n\n##For dates on the X axis\nggplot(data, aes(x = x_axis, y = y_axis))+\n  scale_x_date()\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\nAn example of using a percent scale:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scales \nggplot(data = mpg1, aes(x = displ, y = gallon_percent, colour = class))+\n  geom_point()+\n  #Set name for axis\n  scale_y_continuous(labels = scales::label_percent())\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-14-1.svg){width=576}\n:::\n:::\n\n\n\n\n\n\n\n\nYou can change a large number of aspects of both the appearance and function of the axes using these functions, including:\n\n-   Name on the axis\n-   Change the minimum and maximum values on the scale\n-   Set major and minor values on the scale\n-   Position of the axis\n-   Type-specific changes such as setting the appearance of dates or transforming to log scale\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Aesthetics\nggplot(data = mpg, aes(x = displ, y = hwy, colour = class))+\n  geom_point()+\n  #Set name for axis\n  scale_x_continuous(name = \"displacement\",\n                     #Set min and max limits\n                     limits = c(0,8))\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-15-1.svg){width=576}\n:::\n:::\n\n\n\n\n\n\n\n\nCheck the arguments available for any scale function using `?` in front of it in the console; e.g. `?scale_x_date`\n\n## Changing colour palettes\n\nIf you don't specify colours to use, ggplot will default to the (relatively ugly) standard palette. Luckily, there are loads of ways to easily choose more attractive colour options!\n\n**Note that when you are changing colours in a chart, there are two different options;** *colour* is used for points and lines in charts, while *fill* is for the central fill colour in objects like bars. Make sure you use the right one when calling scale arguments!\n\nUsing `scale_colour_brewer()` or `scale_fill_brewer()` allows you to select from one of the ColorBrewer palettes; these are designed to be attractive, and many of them are colour-blind friendly.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Chart using the standard colour brewer palette\n\nggplot(data = mpg, aes(x = displ, y = hwy, colour = class))+\n  geom_point()+\n  scale_colour_brewer()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-16-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nChange the palette used with the `palette` argument:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Chart using the Dark2 palette\n\nggplot(data = mpg, aes(x = displ, y = hwy, colour = class))+\n  geom_point()+\n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-17-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nYou can see the full range of palettes available with their names here:\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/rcolorbrewer.png){width=198}\n:::\n:::\n\n\n\n\n\n\n\n\nYou can also design your own custom palettes using either named colours or hex codes and pass them to your charts using the `scale_*x*_manual` functions:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Chart using a custom defined palette\n\nmy_cols <- c(\"#DAF7A6\", \"#CCDC6D\", \"#FFC300\", \"#FF5733\", \"#C70039\", \"#900C3F\", \"#581845\")\n\nggplot(data = mpg, aes(x = displ, y = hwy, colour = class))+\n  geom_point()+\n  scale_colour_manual(values = my_cols)\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-19-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n### Exercise\n\n`<div class=\"countdown\" id=\"timer_77149fd1\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative; width: min-content;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n1.  Change the colour palette your chart uses to something you like better than the default! Use the scale_colour_brewer or scale_colour_manual to do this.\n\n<details>\n\n<summary style=\"font-size: 20px; font-weight: bold;\">\n\n3.6.1. Solution</strong>\n\n</summary>\n\n<br>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point(shape = 3) +\n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-20-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n</details>\n\n<br>\n\n## Facets\n\nFaceting charts in R is a good way to produce multiple identical charts; this feature splits data by a provided variable and plots one value per chart. It is very useful when overlapping data is difficult to read. Using the `facet_wrap()` function, you can pass any variable to the first argument (prefacing it with \\~), as well as specifying the row/column layout of the result\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Chart using the Dark2 palette\n\nggplot(data = mpg, aes(x = displ, y = hwy, colour = class))+\n  geom_point()+\n  #Facet by class\n  facet_wrap(~class)+\n  scale_colour_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-21-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n## Titles\n\nLabels and titles can be added without changing the axes using the labs command.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Themes, titles, and multiple plots\nggplot(data = mpg, aes(x = class, y =..prop.., group = 1))+\n  geom_bar()+\n  labs(title = \"Proportion of sample by class\", x = \"Class\", y = \"Proportion\")\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-22-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n## Adding themes\n\nChanging the theme is a quick and easy way to set many of the visual aspects of your charts, such as the appearance of grid lines, size of text, and position of the legends. You can change the theme to a number of presets:\n\n------------------------------------------------------------------------\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot <- ggplot(data = mpg, aes(x = displ, y = hwy, colour = class))+\n  geom_point()+\n  scale_colour_brewer(palette = \"Dark2\")\n\n#Applying different themes\n plot+theme_bw() \n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-23-1.svg){width=672}\n:::\n\n```{.r .cell-code}\n plot+theme_classic() \n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-23-2.svg){width=672}\n:::\n\n```{.r .cell-code}\n plot+theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-23-3.svg){width=672}\n:::\n\n```{.r .cell-code}\n plot+theme_light()\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-23-4.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n------------------------------------------------------------------------\n\nYou can also make your own custom themes; plot are made up of four elements `element_text`, `element_line`, `element_rect`, and `element_blank`. Plots can be modified using these element commands. For example:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#You can also make your own custom themes\n#\nugly.theme <-\n  theme(\n    text = element_text(colour ='orange', face ='bold'),\n    panel.grid.major = element_line(colour = \"violet\", linetype = \"dashed\"),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = 'black', colour = 'red')\n  )\n```\n:::\n\n\n\n\n\n\n\n\n------------------------------------------------------------------------\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot+ugly.theme\n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-25-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n### Exercise\n\n`<div class=\"countdown\" id=\"timer_902a1479\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative; width: min-content;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n1.  Add one of the default themes to your chart to improve its appearance.\n2.  Add a title and labels to your axes\n\n<details>\n\n<summary style=\"font-size: 20px; font-weight: bold;\">\n\n3.9.1. Solution</strong>\n\n</summary>\n\n<br>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width, colour = Species)) +\n  geom_point() +\n  #Add title and labels to axes\n  labs(title = \"Chart\", x = \"Sepal.Length\", y = \"Sepal.Width\") +\n  scale_colour_brewer(palette = \"Dark2\") +\n  #Add in-built R theme\n  theme_bw() \n```\n\n::: {.cell-output-display}\n![](ggplot_files/figure-html/unnamed-chunk-26-1.svg){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n</details>\n\n<br>\n\n## Saving plots\n\nMost of the time you will want to create plots directly into an R Markdown output, or a shiny app. However plots can also be saved as image (png) file:\n\n-   'Export' button in RStudio viewer\n\n-   ggsave(filename = \"plotname.png\", plot = myplot) - saves the plot into your current working directory in R Studio. Can then be downloaded from the platform via 'More' -\\> 'Export...'\n\n### Saving a plot with today's date\n\nSomething that has been raised in this section is: what if I want to add today’s date in the filename when saving a plot? This can be useful for organising and tracking plots over time. To do this, you can use the `Sys.Date()` function in R, which returns the current date in `YYYY-MM-DD` format.\n\nFor example, if you wanted to save a plot with today’s date included in the filename, you could use:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = paste0(\"plot_\", Sys.Date(), \".png\"), plot = myplot)\n```\n:::\n\n\n\n\n\n\n\n\nThis will save the plot `myplot` as a PNG file with a filename that includes the current date, like `plot_2025-03-07.png`, where `Sys.Date()` provides today's date in the format `YYYY-MM-DD`. It's a great way to ensure your plot files are uniquely named based on the date.\n\n<br>\n\nThis is a good opportunity to take a 10-minute break away from the computer to refresh your mind, stretch, and reset before continuing onto Chapter 4 and 5.\n",
    "supporting": [
      "ggplot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}