{
  "hash": "98cae0fe9647396fec5859377cf4f239",
  "result": {
    "engine": "knitr",
    "markdown": "# Importing Data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSo far, we have only made use of data which is pre-loaded into R via packages, but it is also possible to load your own data in from a variety of sources. We will focus on two different file types;\n\n-   CSV\n-   Excel\n\n## Local Reading\n\nAs described in Chapter 1, the bottom right pane of RStudio allows you to view files that are within your own personal filesystem. You are free to create new folders in this area, using the `New Folder` button.\n\n`<div class=\"countdown\" id=\"timer_4a308611\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative; width: min-content;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n1.  Navigate to the `Files` at the bottom right pane of your RStudio\n2.  Create a new folder called `data`\n3.  Save the GCP dataset to this folder as `gcp.csv`\n\nGreat, we will come back to using these two files, but first let's discuss how to read in csv files.\n\n## CSV\n\nAlthough there is a `read.csv()` function in base R, like most things there is a better `tidyverse` alternative! `read_csv()` from the `readr` package reads CSVs in as a tibble (which has additional features compared to a standard data frame), is much faster (\\~10X), and allows you to specify how you read data in more easily.\n\nAs always, let's read the function documentation using `?read_csv`. This tells us we need to provide a path to the file. This path can be either local or remote; so it will work equally well for data inside your project or from the internet.\n\nTo read in a local file, you have to specify the exact location of the file. You can do this as either an *absolute* filepath, which starts from the drive name right through to the final file (e.g. C:/Documents/My_work/file.csv), or as a *relative* file path. A relative file path just gives the location of the file starting from your current working environment. You can check what your current working environment is using the command `getwd()`. The advantage of using relative file paths is if someone duplicates your project from Github, the code will still work on their own computer.\n\nWe will start by reading in some local data, which contains details of Kenyan Gross County Product by economic activity for 2017:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngcp <- read_csv(\"data/gcp.csv\")\n```\n:::\n\n\n\n\n\n\n\n\nNotice that the file is inside the **data** folder inside the current working directory.\n\n`gcp` will now show in your environment. The environment viewer (top right) shows you basic information about the data that has been loaded in. You can also click on any object to view it in your script window.\n\nYou can also read in data directly from the web using the same function. For example, reading in this CSV of Eurovision Song Contest data:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neurovision_data <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-17/eurovision.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 2005 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (12): event, host_city, host_country, event_url, section, artist, song, ...\ndbl  (4): year, running_order, total_points, rank\nlgl  (2): qualified, winner\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nThis works exactly the same way as reading in local data, and the object you have created will appear in your environment (top right).\n\n### Exercise\n\n`<div class=\"countdown\" id=\"timer_29cfd82b\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative; width: min-content;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n1.  Read in the frogs dataset found here:'<https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-02/frogs.csv>' as an object called `frogs`\n\n<details>\n\n<summary style=\"font-size: 20px; font-weight: bold;\">\n\n4.2.1. Solution</strong>\n\n</summary>\n\n<br>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrogs <- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-02/frogs.csv\")\n```\n:::\n\n\n\n\n\n\n\n\n</details>\n\n<br>\n\n### Inspecting the dataset\n\nAs noted in the previous section, you can see by looking in the environment window that the eurovision dataset has 2005 observations and 18 variables. You can also return this information (and more) about datasets programatically, using the `glimpse()` function, again from the dplyr package:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(eurovision_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,005\nColumns: 18\n$ event          <chr> \"Turin 2022\", \"Turin 2022\", \"Turin 2022\", \"Turin 2022\",…\n$ host_city      <chr> \"Turin\", \"Turin\", \"Turin\", \"Turin\", \"Turin\", \"Turin\", \"…\n$ year           <dbl> 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2…\n$ host_country   <chr> \"Italy\", \"Italy\", \"Italy\", \"Italy\", \"Italy\", \"Italy\", \"…\n$ event_url      <chr> \"https://eurovision.tv/event/turin-2022\", \"https://euro…\n$ section        <chr> \"first-semi-final\", \"first-semi-final\", \"first-semi-fin…\n$ artist         <chr> \"Kalush Orchestra\", \"S10\", \"Amanda Georgiadi Tenfjord\",…\n$ song           <chr> \"Stefania\", \"De Diepte\", \"Die Together\", \"Saudade, Saud…\n$ artist_url     <chr> \"https://eurovision.tv/participant/kalush-orchestra-22\"…\n$ image_url      <chr> \"https://static.eurovision.tv/hb-cgi/images/963164d0-06…\n$ artist_country <chr> \"Ukraine\", \"Netherlands\", \"Greece\", \"Portugal\", \"Bulgar…\n$ country_emoji  <chr> \":flag_ua:\", \":flag_nl:\", \":flag_gr:\", \":flag_pt:\", \":f…\n$ running_order  <dbl> 6, 8, 15, 10, 7, 5, 17, 16, 3, 9, 4, 14, 11, 1, 12, 2, …\n$ total_points   <dbl> 337, 221, 211, 208, 29, 15, 187, 177, 159, 154, 118, 10…\n$ rank           <dbl> 1, 2, 3, 4, 16, 17, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, …\n$ rank_ordinal   <chr> \"1st\", \"2nd\", \"3rd\", \"4th\", \"16th\", \"17th\", \"5th\", \"6th…\n$ qualified      <lgl> TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE,…\n$ winner         <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nAs well as returning the number of rows and columns in the data, the glimpse function also shows you the names of the columns, the column classes (indicated in <triangular brackets>), and an example of the first few rows of data.\n\n### Exercise\n\n`<div class=\"countdown\" id=\"timer_1962fa86\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative; width: min-content;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n1.  Use the glimpse and View functions to examine the frogs dataset. How many rows and columns does it have?\n\n<details>\n\n<summary style=\"font-size: 20px; font-weight: bold;\">\n\n4.2.3. Solution</strong>\n\n</summary>\n\n<br>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(frogs)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(frogs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 311\nColumns: 16\n$ Site       <chr> \"Crane Prairie\", \"Crane Prairie\", \"Crane Prairie\", \"Crane P…\n$ Subsite    <chr> \"SE Pond\", \"SE Pond\", \"SE Pond\", \"SE Pond\", \"SE Pond\", \"SE …\n$ HabType    <chr> \"Pond\", \"Pond\", \"Pond\", \"Pond\", \"Pond\", \"Pond\", \"Pond\", \"Po…\n$ SurveyDate <chr> \"9/25/2018\", \"10/2/2018\", \"10/9/2018\", \"10/15/2018\", \"10/22…\n$ Ordinal    <int> 268, 275, 282, 288, 295, 305, 309, 317, 322, 330, 270, 277,…\n$ Frequency  <dbl> 164.169, 164.169, 164.169, 164.169, 164.169, 164.169, 164.1…\n$ UTME_83    <int> 597369, 597352, 597345, 597340, 597344, 597410, 597369, 597…\n$ UTMN_83    <int> 4846486, 4846487, 4846458, 4846464, 4846460, 4846451, 48464…\n$ Interval   <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,…\n$ Female     <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Water      <chr> \"Deep water\", \"Deep water\", \"Shallow water\", \"Deep water\", …\n$ Type       <chr> \"Marsh/Pond\", \"Marsh/Pond\", \"Marsh/Pond\", \"Marsh/Pond\", \"Ma…\n$ Structure  <chr> \"Herbaceous veg\", \"Open\", \"Herbaceous veg\", \"Woody debris\",…\n$ Substrate  <chr> \"Unknown substrate\", \"Unknown substrate\", \"Unknown substrat…\n$ Beaver     <chr> \"No beaver\", \"No beaver\", \"No beaver\", \"No beaver\", \"No bea…\n$ Detection  <chr> \"Captured\", \"No visual\", \"No visual\", \"No visual\", \"No visu…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n</details>\n\n<br>\n\n## Excel\n\nReading excel files works in much the same way as CSV files. However, due to the difference in underlying structures we require the function `read_excel()` from a different package called `readxl`.\n\nThe main difference when reading excel files is three additional arguments that we can set;\n\n-   `sheet` which allows us to specify which sheet to read. It can take the form of a string (the name of the sheet) or an integer (the position of the sheet); and\n-   `range` which allows us to specify a cell range. It takes a typical cell reference like \"B3:D10\".\n-   `skip` an alternative to specifying a cell range, you can simply indicate how many rows to skip at the start of the sheet. This is ideal if you want to read in a sheet with an unknown number of columns and/or rows, but know there are several lines of metadata at the top of the sheet.\n\nIf we don't set any of these arguments it will assume our data is in the first row of the first sheet (and it becomes almost identical to read_csv above).\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# One option is to download the file \nurl = \"https://www.knbs.or.ke/wp-content/uploads/2024/04/2023-Economic-Survey-Kenya-Tourism-Sector.xlsx\"\ndownload_first <- download.file(,destfile = \"tourism.xlsx\")\ntourism <- read_excel(\"tourism.xlsx\")\n```\n:::\n\n\n\n\n\n\n\n\n\n### Exercise\n\n`<div class=\"countdown\" id=\"timer_e70b43e0\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;position: relative; width: min-content;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n1.  Install and load the readxl package.\n2.  Try downloading an excel spreadsheet from KNBS. For example: \"https://www.knbs.or.ke/wp-content/uploads/2024/04/2023-Economic-Survey-Kenya-Tourism-Sector.xlsx\"\n3.  Specify the sheet name you want to read in.\n4.  Examine the data you have read in; are the column names what you want? Work out how to skip these and only read in the data, with the correct column names.\n\n<details>\n\n<summary style=\"font-size: 20px; font-weight: bold;\">\n\n4.3.1. Solution</strong>\n\n</summary>\n\n<br>\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl = \"https://www.knbs.or.ke/wp-content/uploads/2024/04/2023-Economic-Survey-Kenya-Tourism-Sector.xlsx\"\ndownload_first <- download.file(url,destfile = \"data/tourism.xlsx\")\ntourism <- read_excel(\"data/tourism.xlsx\", sheet = \"Table 12.5\", skip = 2)\n```\n:::\n\n\n\n\n\n\n\n\n## Rio\n\nSometimes you may want to read a selection of files of all different types. This is where `Rio` can come in handy. `Rio` is a wrapper around the libraries we've used above and many more, which lets you use `import()` to read almost any file in. This isn't always useful, when you want to do very specific things with a certain file, but can be much cleaner.\n\n</details>\n\n<br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}