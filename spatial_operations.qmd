---
title: "Spatial Operations"
format: html
---

```{r, include=FALSE}

# load packages
library(sf) 
library(ggplot2)
library(dplyr)
library(readr)
library(stringr)
library(ggspatial)
library(plotly)
library(countdown)
library(tidyr)
```

```{r}
#| include: false
kenya_2017 <- sf::st_read(
  "data/admn2/ken_admbnda_adm2_iebc_20191031.shp",
  quiet = TRUE
)

health_sf <- readr::read_csv("data/Health_facilities_-4126638174547585951.csv") |> sf::st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)

nairobi_boundary <- kenya_2017 |>
  dplyr::filter(stringr::str_detect(ADM1_PCODE, "KE047")) |>  sf::st_union()


```

## Spatial joins

Simple features data can be joined to other data sets in two ways. We can either use a traditional, SQL like join, based on a value shared across the data sets or, since we have a geometry column, on the spatial relationship between the data sets. This is known as a spatial join, where variables from one data set are joined to another only on the basis of their spatial relationship. The most commonly used operation is known as a Point-in-Polygon join where data from a polygon is joined to the points within them.

In `sf` spatial joins are handled using the `st_join(x, y)` function with arguments:

-   x - `sf` object to which we are joining data (LHS in SQL)
-   y - `sf` object whose variables are being joined (RHS in SQL)

We will be joining the subcounty shapefile to the health facility location data.

### Exercise

```{r}
#| echo: False

countdown(minutes = 10, seconds = 0, style = "position: relative; width: min-content;")
```

1.  Create a new dataframe called `kenya_health` by running `st_join()` between `kenya_2017` and `health_sf`
2.  Inspect it using `head()` or `glimpse()` to see what columns have been added.

```{r}
kenya_2017 <- st_make_valid(kenya_2017)
kenya_health <- sf::st_join(kenya_2017, health_sf) 

head(kenya_health)
```

Now that `kenya_2017` is attached to our observations we can create summary statistics for each subcounty, and plot them at the subcounty level As mentioned before, we can use `tidyverse` functions on `sf` objects. Here, we will use `dplyr` to calculate the total number of facilities in each subcounty.

### Exercise

```{r}
#| echo: False

countdown(minutes = 10, seconds = 0, style = "position: relative; width: min-content;")
```

1.  Create summary statistics per subcounty for the total number of health facilities. You will need to use `group_by()` and `summarise()`

```{r}
#| code-fold: true
#| code-summary: "Solution"


health_facilities <- kenya_health |>
  group_by(geometry, ADM2_EN) |> 
  summarise(num_facilities = n())
      
```

At this stage it is a good idea to save our data. We can do this using the `st_write()` function. It needs an `sf` object and the path and name of the output.

### Exercise

```{r}
#| echo: False

countdown(minutes = 10, seconds = 0, style = "position: relative; width: min-content;")
```

1.  Copy and execute the following code to save your data: `st_write(msoa_lfb,"output/msoa_lfb.gpkg)`

## Making better maps

Now that we have processed our data we can start mapping it. So far we have only used the `geom_sf()` function from the `ggplot2` package. This creates a default map and is great when all we want to do is quickly visualise our data. The full range of `ggplot2` (and `ggspatial`) functions gives us control over all elements of the final plot and allows us to create high quality maps.

`ggplot2` follows the grammar of graphics, where we first specify the data source - `ggplot()`, then the type of plot - `geom_sf`, `geom_polygons`, etc., and then we make any final adjustments to the overall look - `labs`.

```{r}
#| eval: false
ggplot(sf_object) + 
  geom_sf(aes(fill = name_of_column)) +
  labs(title = title_of_map)
```

### Exercise

```{r}
#| echo: False

countdown(minutes = 10, seconds = 0, style = "position: relative; width: min-content;")
```

1.  Start by specifying which `sf` object is being mapped in `ggplot()` and what column holds the values to be visualised. We will also change the legend's title.

```{r}
#| code-fold: true
#| code-summary: "Solution"
ggplot(health_facilities) + 
  geom_sf(aes(fill = num_facilities)) +
  labs(fill = "Number of health facilities")
```

2.  Now let's add `nairobi_boundary` to have a thicker line around Nairobi.

```{r}
#| code-fold: true
#| code-summary: "Solution"
ggplot() + 
  geom_sf(data = health_facilities, aes(fill = num_facilities)) +
  geom_sf(data = nairobi_boundary, fill = NA, color = "black", size = 1) +
  labs(fill = "Number of health facilities")
```

3.  Next we will add a scale bar and position it in the bottom left corner.

```{r}
#| code-fold: true
#| code-summary: "Solution"
# First, install and load ggspatial if not already available
# install.packages("ggspatial")
ggplot() + 
  geom_sf(data = health_facilities, aes(fill = num_facilities)) +
  geom_sf(data = nairobi_boundary, fill = NA, color = "black", size = 1) +
  annotation_scale(location = "bl") +
  labs(fill = "Number of health facilities")
```

4.  We can now remove the black frame from the map and add a title to our map.

```{r}
#| code-fold: true
#| code-summary: "Solution"
ggplot() + 
  geom_sf(data = health_facilities, aes(fill = num_facilities)) +
  geom_sf(data = nairobi_boundary, fill = NA, color = "black", size = 1) +
  annotation_scale(location = "bl") +
  labs(
    title = "Kenya Health",
    fill = "Number of health facilities"
  ) +
  theme_minimal() +
  theme(panel.grid = element_blank())
```

5.  All of the map elements are now visible but they're not in the right place. We can solve this by increasing the margins around our map. This will allow the title and the legend to move outwards.

```{r}
#| code-fold: true
#| code-summary: "Solution"

ggplot() + 
  geom_sf(data = health_facilities, aes(fill = num_facilities)) +
  geom_sf(data = nairobi_boundary, fill = NA, color = "black", size = 1) +
  annotation_scale(location = "bl") +
  labs(
    title = "Kenya Health",
    fill = "Number of health facilities"
  ) +
  theme_minimal() +
  theme(panel.grid = element_blank(),
            plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm")
)
```

Finally, save your map as an R object and export it.

```{r}
#| code-fold: true
#| code-summary: "Solution"

health_map <- ggplot() + 
  geom_sf(data = health_facilities, aes(fill = num_facilities)) +
  geom_sf(data = nairobi_boundary, fill = NA, color = "black", size = 1) +
  annotation_scale(location = "bl") +
  labs(
    title = "Kenya Health",
    fill = "Number of health facilities"
  ) +
  theme_minimal() +
  theme(panel.grid = element_blank(),
            plot.margin = margin(0.5, 0.5, 0.5, 0.5, "cm")
)

```

```{r}
#| code-fold: true
#| code-summary: "Solution"
#| eval: false
# Save the map
ggsave("output/maps/health_facilities.png", health_map, width = 8, height = 5)
```

You can also view your choropleth as an interactive map.

```{r}
#| code-fold: true
#| code-summary: "Solution"

health_map <- ggplot() + 
  geom_sf(data = health_facilities, aes(fill = num_facilities)) +
  geom_sf(data = nairobi_boundary, fill = NA, color = "black", size = 1) +
  annotation_scale(location = "bl") +
  labs(
    title = "Kenya Health",
    fill = "Number of health facilities"
  ) 
# Convert to interactive plot
interactive_map <- ggplotly(health_map)
interactive_map
```
